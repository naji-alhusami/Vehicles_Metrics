schema {
  mutation: RootMutationType
  query: RootQueryType
}

type RandomGenerator {
  number: Int
}

"The result of the :create_telemetry_reading mutation"
type CreateTelemetryReadingResult {
  "The successful result of the mutation"
  result: TelemetryReading

  "Any errors generated, if the mutation failed"
  errors: [MutationError!]!
}

enum TelemetryReadingSortField {
  ID
}

"A keyset page of :telemetry_reading"
type KeysetPageOfTelemetryReading {
  "Total count on all pages"
  count: Int

  "The records contained in the page"
  results: [TelemetryReading!]

  "The first keyset in the results"
  startKeyset: String

  "The last keyset in the results"
  endKeyset: String
}

input TelemetryReadingFilterId {
  isNil: Boolean
  eq: ID
  notEq: ID
  in: [ID!]
  lessThan: ID
  greaterThan: ID
  lessThanOrEqual: ID
  greaterThanOrEqual: ID
}

input TelemetryReadingFilterInput {
  and: [TelemetryReadingFilterInput!]
  or: [TelemetryReadingFilterInput!]
  not: [TelemetryReadingFilterInput!]
  id: TelemetryReadingFilterId
}

input TelemetryReadingSortInput {
  order: SortOrder
  field: TelemetryReadingSortField!
}

type TelemetryReading {
  id: ID!
}

enum VehicleSortField {
  ID
  NAME
  VIN
}

"A keyset page of :vehicle"
type KeysetPageOfVehicle {
  "Total count on all pages"
  count: Int

  "The records contained in the page"
  results: [Vehicle!]

  "The first keyset in the results"
  startKeyset: String

  "The last keyset in the results"
  endKeyset: String
}

input VehicleFilterVin {
  isNil: Boolean
  eq: String
  notEq: String
  in: [String]
  lessThan: String
  greaterThan: String
  lessThanOrEqual: String
  greaterThanOrEqual: String
  like: String
  ilike: String
}

input VehicleFilterName {
  isNil: Boolean
  eq: String
  notEq: String
  in: [String]
  lessThan: String
  greaterThan: String
  lessThanOrEqual: String
  greaterThanOrEqual: String
  like: String
  ilike: String
}

input VehicleFilterId {
  isNil: Boolean
  eq: ID
  notEq: ID
  in: [ID!]
  lessThan: ID
  greaterThan: ID
  lessThanOrEqual: ID
  greaterThanOrEqual: ID
}

input VehicleFilterInput {
  and: [VehicleFilterInput!]
  or: [VehicleFilterInput!]
  not: [VehicleFilterInput!]
  id: VehicleFilterId
  name: VehicleFilterName
  vin: VehicleFilterVin
}

input VehicleSortInput {
  order: SortOrder
  field: VehicleSortField!
}

type Vehicle {
  id: ID!
  name: String
  vin: String
}

enum SortOrder {
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
}

"An error generated by a failed mutation"
type MutationError {
  "The human readable error message"
  message: String

  "A shorter error message, with vars not replaced"
  shortMessage: String

  "Replacements for the short message"
  vars: Json

  "An error code for the given error"
  code: String

  "The field or fields that produced the error"
  fields: [String!]
}

type RootQueryType {
  getVehicle(
    "The id of the record"
    id: ID!
  ): Vehicle
  listVehicles(
    "How to sort the records in the response"
    sort: [VehicleSortInput]

    "A filter to limit the results"
    filter: VehicleFilterInput

    "The number of records to return from the beginning. Maximum 250"
    first: Int

    "Show records before the specified keyset."
    before: String

    "Show records after the specified keyset."
    after: String

    "The number of records to return to the end. Maximum 250"
    last: Int
  ): KeysetPageOfVehicle
  telemetryReading(
    "The id of the record"
    id: ID!
  ): TelemetryReading
  telemetryReadings(
    "How to sort the records in the response"
    sort: [TelemetryReadingSortInput]

    "A filter to limit the results"
    filter: TelemetryReadingFilterInput

    "The number of records to return from the beginning. Maximum 250"
    first: Int

    "Show records before the specified keyset."
    before: String

    "Show records after the specified keyset."
    after: String

    "The number of records to return to the end. Maximum 250"
    last: Int
  ): KeysetPageOfTelemetryReading
}

type RootMutationType {
  generateFakeVehicles: [Vehicle!]!
  createTelemetryReading: CreateTelemetryReadingResult!
  generateRandomNumbers: [RandomGenerator!]!
}

"""
The `Json` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar Json
